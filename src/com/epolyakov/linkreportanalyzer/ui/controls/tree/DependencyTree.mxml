<?xml version="1.0"?>
<!--
Copyright 2014 Evgeniy Polyakov

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.epolyakov.linkreportanalyzer.ui.controls.filters.ITextFilter"
		 showRoot="true"
		 iconFunction="{function (item:Object):Class {return item.icon}}"
		 labelField="id"
		 itemRenderer="{getItemRendererClassFactory()}"
		 rowHeight="20"
		 itemOpening="itemOpeningHandler(event)"
		 doubleClickEnabled="true">
	<fx:Metadata>
		[Style(name="indentation", type="Number", inherit="no")]
		[Style(name="startIndentation", type="Number", inherit="no")]
	</fx:Metadata>
	<fx:Script><![CDATA[
		import com.epolyakov.linkreportanalyzer.data.Definition;
		import com.epolyakov.linkreportanalyzer.data.DependencyFactory;
		import com.epolyakov.linkreportanalyzer.ui.controls.filters.DependencyFilter;
		import com.epolyakov.linkreportanalyzer.ui.icons.Icons;

		import mx.controls.treeClasses.TreeListData;
		import mx.events.TreeEvent;

		private var _factory:DependencyFactory;
		private var _filter:DependencyFilter;
		private var _includedDefinitions:Object;
		private var _excludedDefinitions:Object;
		private var _openItems:Object;
		private var _itemRendererClassFactory:ClassFactory;

		public function getItemRendererClassFactory():IFactory
		{
			if (_itemRendererClassFactory == null)
			{
				_itemRendererClassFactory = new ClassFactory(DependencyTreeItemRenderer);
				_itemRendererClassFactory.properties = {filter: this};
			}
			return _itemRendererClassFactory;
		}

		public function get textFilter():String
		{
			if (_filter)
			{
				return _filter.textFilter;
			}
			return "";
		}

		public function get selectedDefinition():Definition
		{
			if (selectedItem)
			{
				return selectedItem.definition;
			}
			return null;
		}

		public function update(factory:DependencyFactory, filter:DependencyFilter):void
		{
			_factory = factory;
			if (_filter)
			{
				_filter.removeEventListener(Event.CHANGE, onFilterChange);
			}
			_filter = filter;
			_openItems = {};
			if (_filter)
			{
				_filter.addEventListener(Event.CHANGE, onFilterChange);
			}
			onFilterChange();
		}

		private function onFilterChange(event:Event = null):void
		{
			var root:Object = filterItems();
			dataProvider = root;
			validateNow();
			expandItems(root);
		}

		private function filterItems():Object
		{
			_includedDefinitions = {};
			_excludedDefinitions = {};
			for each (var definition:Definition in _factory.linkReport.getDefinitions())
			{
				if (_filter.testDefinition(definition, _factory.rootDefinition))
				{
					_includedDefinitions[definition.id] = true;
				}
			}
			return getDataProviderNode(_factory.rootDefinition, 1, "");
		}

		public function getDataProviderNode(definition:Definition, depth:int, uid:String):Object
		{
			var node:Object = {
				id: definition.id,
				uid: uid + ">" + definition.id,
				name: definition.name,
				external: definition.isExternal,
				definition: definition
			};
			if (definition.isPackage)
			{
				node.icon = Icons.packageIcon;
			}
			else if (definition.isExternal)
			{
				node.icon = Icons.externalIcon;
			}
			else
			{
				node.icon = Icons.defineIcon;
			}
			expandDataProviderNode(node, depth);
			return node;
		}

		public function expandDataProviderNode(node:Object, depth:int):void
		{
			var definition:Definition = node.definition;
			var dependency:Definition;
			var dependencies:Vector.<Definition> = _factory.getDependencies(definition);
			if (dependencies.length > 0)
			{
				if (depth > 0 || _openItems[node.uid])
				{
					// Create child nodes
					var children:Array = [];
					for each (dependency in dependencies)
					{
						if (testDefinitionDescendants(dependency, new <Definition>[]))
						{
							var childNode:Object = getDataProviderNode(dependency, depth - 1, node.uid);
							childNode.parent = node;
							children.push(childNode);
						}
					}
					if (children.length > 0)
					{
						node.children = children;
					}
				}
				else
				{
					// Mark the node as branch
					for each (dependency in dependencies)
					{
						if (testDefinitionDescendants(dependency, new <Definition>[]))
						{
							node.children = [];
							break;
						}
					}
				}
			}
		}

		override protected function initListData(item:Object, treeListData:TreeListData):void
		{
			super.initListData(item, treeListData);

			var root:Boolean = item.parent == null;
			if (root)
			{
				treeListData.indent = 0;
			}
			else
			{
				treeListData.indent = getStyle("startIndentation") + (treeListData.depth - 2) * getStyle("indentation");
			}
		}

		private function itemOpeningHandler(event:TreeEvent):void
		{
			event.preventDefault();
			if (event.opening)
			{
				expandDataProviderNode(event.item, 1);
			}
			_openItems[event.item.uid] = event.opening;
			expandItem(event.item, event.opening);
		}

		private function testDefinitionDescendants(definiton:Definition, path:Vector.<Definition>):Boolean
		{
			if (_includedDefinitions[definiton.id])
			{
				return true;
			}
			if (_excludedDefinitions[definiton.id])
			{
				return false;
			}
			if (path.indexOf(definiton) >= 0)
			{
				return false;
			}
			if (path.indexOf(_factory.rootDefinition) >= 0)
			{
				return false;
			}
			var dependencies:Vector.<Definition> = _factory.getDependencies(definiton);
			var n:int = dependencies.length;
			if (n > 0)
			{
				path.push(definiton);
				for (var i:int = 0; i < n; i++)
				{
					if (testDefinitionDescendants(dependencies[i], path))
					{
						return true;
					}
				}
				path.pop();
			}
			_excludedDefinitions[definiton.id] = true;
			return false;
		}

		public function expandItems(node:Object):void
		{
			expandItem(node, true);
			for each (var child:Object in node.children)
			{
				if (_openItems[child.uid])
				{
					expandItems(child);
				}
			}
		}
		]]></fx:Script>
</mx:Tree>
